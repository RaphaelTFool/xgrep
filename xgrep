#!/bin/bash
# This *grep* script is created to find file or search content from current path (recursively) in your shell.
# Ver 0.1
# by pax (coolwinding@gmail.com) 160808
# Licence: MIT

# How to install and active?
# 1. Run `./install.sh` to create symbolic link in ~/bin/.
# 2a. Do `. ~/bin/xgrep` in your shell to active all functions.
# 2b. Recommend to add `. ~/bin/xgrep` in your ~/.bashrc file,
#     then you don't have to do active every time after one new shell open.
# Now you can do `xfind*` or `xgrep*` function at any path.

### START ###

# exit error code
# refer to /usr/include/sysexits.h
E_OK=0
E_NOT_FOUND=71

# ignore some path, e.g. repo, git...
# you can add more path to ignore
_ignore_these_files="-iname .repo -prune -o -iname .git -prune -o -iname res-min -prune -o -iname *.swp -prune"

#############
# find file #
#############

function _xfind_usage()
{
	echo -e "Usage: \033[31mxfind[i] {filename}\033[0m Find any file from current path (recursively)!\n" >&2
}

function _xfind()
{
	if [[ -z $2 ]]
	then
		_xfind_usage
		return
	else
		local key=$2
	fi
	#echo $key

	if [[ "x$1" == "x1" ]]
	then
		local ignorecase="-iname" # ignore case of filename
		local ignorecase2="-i" # ignore case of filename
	else
		local ignorecase="-name"
		local ignorecase2=""
	fi

	find . $_ignore_these_files -o $ignorecase "*$key*" -print | grep $ignorecase2 --color "$key"
}

# any files
function xfind()
{
	_xfind 0 "$@"
}

function xfindi()
{
	_xfind 1 "$@"
}

##################
# search content #
##################

function _xgrep_usage()
{
	echo -e "Usage: \033[31mxgrep[i][{type}] {content}\033[0m Search any content from current path (recursively)!\n" >&2
}

function _xgrep()
{
	if [[ -z $3 ]]
	then
		_xgrep_usage
		return
	else
		local key=$3
	fi
	#echo $key

	local regex=$2
	#echo $regex

	if [[ "x$1" == "x1" ]]
	then
		local ignorecase="-i" # ignore case of content
	else
		local ignorecase=""
	fi

	# Note: file type (`-iregex`) is case insensitive by default.
	find . $_ignore_these_files -o -type f -iregex "$regex" -print0 | xargs -0 grep $ignorecase --color -n "$key"
}

# any files
_xregex=".+"

function xgrep()
{
	_xgrep 0 $_xregex "$@"
}

function xgrepi()
{
	_xgrep 1 $_xregex "$@"
}

# c, c++, m (objective-c), header
_xregexc=".+\.\(c\|cc\|cpp\|m\|h\)"

function xgrepc()
{
	_xgrep 0 $_xregexc "$@"
}

function xgrepic()
{
	_xgrep 1 $_xregexc "$@"
}

# just header
_xregexh=".+\.\(h\)"

function xgreph()
{
	_xgrep 0 $_xregexh "$@"
}

function xgrepih()
{
	_xgrep 1 $_xregexh "$@"
}

# java
_xregexjava=".+\.\(java\)"

function xgrepjava()
{
	_xgrep 0 $_xregexjava "$@"
}

function xgrepijava()
{
	_xgrep 1 $_xregexjava "$@"
}

# makefile
_xregexmk=".*\(Makefile\|\.mk\|\.bb\)"

function xgrepmk()
{
	_xgrep 0 $_xregexmk "$@"
}

function xgrepimk()
{
	_xgrep 1 $_xregexmk "$@"
}

# html
_xregexhtml=".+\.\(html\|htm\)"

function xgrephtml()
{
	_xgrep 0 $_xregexhtml "$@"
}

function xgrepihtml()
{
	_xgrep 1 $_xregexhtml "$@"
}

# css
_xregexcss=".+\.\(css\)"

function xgrepcss()
{
	_xgrep 0 $_xregexcss "$@"
}

function xgrepicss()
{
	_xgrep 1 $_xregexcss "$@"
}

# javascript, json
_xregexjs=".+\.\(js\|json\)"

function xgrepjs()
{
	_xgrep 0 $_xregexjs "$@"
}

function xgrepijs()
{
	_xgrep 1 $_xregexjs "$@"
}

# lua
_xregexlua=".+\.\(lua\)"

function xgreplua()
{
	_xgrep 0 $_xregexlua "$@"
}

function xgrepilua()
{
	_xgrep 1 $_xregexlua "$@"
}

# xml
_xregexxml=".+\.\(xml\)"

function xgrepxml()
{
	_xgrep 0 $_xregexxml "$@"
}

function xgrepixml()
{
	_xgrep 1 $_xregexxml "$@"
}

# pdf
# depend on *pdftotext*
function checkpdftotext()
{
	if [[ -f /usr/bin/pdftotext ]]
	then
		echo $E_OK
	else
		echo -e "\033[31m***xgrep*** Error: pdftotext not installed!\033[0m" >&2
		echo $E_NOT_FOUND
	fi
}

function xgreppdf()
{
	pdftotext=$(checkpdftotext)
	if [[ "x"$pdftotext == "x"$E_OK ]]
	then
		echo -e "\033[33m***xgrep*** Note: the line number is just suggested, not precise maybe.\033[0m"
		find . -iname '*.pdf' -print -exec pdftotext {} /tmp/tmp.txt \; -exec grep -n --color "$@" /tmp/tmp.txt \;
	fi
}

function xgrepipdf()
{
	pdftotext=$(checkpdftotext)
	if [[ "x"$pdftotext == "x"$E_OK ]]
	then
		echo -e "\033[33m***xgrep*** Note: the line number is just suggested, not precise maybe.\033[0m"
		find . -iname '*.pdf' -print -exec pdftotext {} /tmp/tmp.txt \; -exec grep -n -i --color "$@" /tmp/tmp.txt \;
	fi
}

# you can add more type if you like...

##############################
# search process and more... #
##############################

# history
function xgrephistory()
{
	history | grep --color "$@"
}

function xgrepihistory()
{
	history | grep -i --color "$@"
}

# ps
function xgrepps()
{
	ps ax | grep --color "$@"
}

function xgrepips()
{
	ps ax | grep -i --color "$@"
}

# netstat
function xgrepnetstat()
{
	netstat -anpt | grep --color "$@"
}

function xgrepinetstat()
{
	netstat -anpt | grep -i --color "$@"
}

### END ###
